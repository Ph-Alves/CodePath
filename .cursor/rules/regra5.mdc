---
description: 
globs: 
alwaysApply: true
---
Project Rule 5: Manutenção

Objetivo:
Estabelecer práticas para garantir que o sistema se mantenha funcional, compreensível, testável e evolutivo, mesmo após o fim do ciclo de desenvolvimento inicial.

Escopo:
Esta regra se aplica à manutenção preventiva, corretiva e evolutiva do sistema, incluindo organização de arquivos, versionamento, limpeza de código e testes.

Diretrizes:
	1.	Controle de Versão com Git
	•	Toda mudança deve ser comitada com mensagem clara e objetiva (feat:, fix:, refactor:, docs:).
	•	A branch principal deve se manter sempre funcional. Use branches específicas para features e correções.
	•	Commits parciais não podem quebrar rotas, views ou funcionalidades.
	•	Nunca comitar arquivos de configuração local, pastas node_modules, arquivos de banco (.db) ou dados sensíveis.
	2.	Refatoração Contínua
	•	Sempre que código duplicado, desorganizado ou difícil de entender for identificado, refatore.
	•	Refatorações pequenas podem ser incluídas na mesma entrega. Refatorações maiores devem ser planejadas separadamente.
	•	Nunca adicionar “gambiarras” temporárias sem criar uma tarefa clara de resolução posterior.
	3.	Limpeza de Código
	•	Após testes, remova qualquer log temporário (ex: console.log, mensagens de debug).
	•	Elimine variáveis ou funções não utilizadas.
	•	Verifique dependências do projeto e remova pacotes não utilizados.
	4.	Testes e Verificação Manual
	•	Toda nova funcionalidade deve ser testada manualmente em pelo menos dois navegadores (ex: Chrome e Firefox).
	•	Corrigir fluxos quebrados de navegação, tela branca ou inconsistência visual antes de subir para o repositório principal.
	•	Bugs reportados devem ser reproduzidos antes de corrigidos. Se não forem reprodutíveis, documentar tentativa.
	5.	Checklist de Entrega de Funcionalidade
	•	Código está funcional?
	•	View está responsiva e sem quebra de layout?
	•	Há documentação atualizada?
	•	Não há logs, códigos comentados ou arquivos desnecessários no commit?
	•	Estrutura de pastas e arquivos está coerente com o restante do projeto?

Exemplo:
Ao implementar uma nova página de visualização de progresso (/dashboard/progress), certifique-se de:
	•	Criar a view .mustache, importar corretamente o estilo, testar responsividade.
	•	Adicionar rota modular e controller correspondente.
	•	Atualizar docs/rotas.md com a nova entrada.
	•	Fazer commit com mensagem: feat(progress): adiciona tela de progresso no dashboard.
	•	Validar a exibição em tela e limpar todos os console.log() utilizados durante o teste.

Responsabilidade:
Cada desenvolvedor deve manter seu código limpo, testado, funcional e documentado. A manutenção é parte do desenvolvimento, não uma etapa posterior.

Auditoria:
Durante revisões ou entregas, verificar se há acúmulo de código morto, problemas não resolvidos ou inconsistências estruturais. A ausência de manutenção preventiva compromete a continuidade do projeto.