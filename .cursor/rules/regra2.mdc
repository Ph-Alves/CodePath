---
description: 
globs: 
alwaysApply: true
---
Project Rule 2: Arquitetura

Objetivo:
Garantir que a estrutura do projeto seja organizada, escalável e compreensível, utilizando princípios de separação de responsabilidades, padronização de pastas e aderência ao modelo MVC adaptado para Express.js com mustache.

Escopo:
Aplica-se à estrutura de arquivos, organização dos módulos, fluxo de dados entre camadas e definição de responsabilidades técnicas.

Diretrizes:
	1.	O projeto deve seguir o padrão MVC simplificado:
	•	Model: arquivos de acesso e manipulação de dados (SQL queries, interfaces com SQLite).
	•	View: arquivos .mustache dentro de views/, separados por tipo de página (ex: pages/, partials/).
	•	Controller: lógica das rotas Express (controllers/), contendo a manipulação de dados e renderização de views.
	2.	Estrutura mínima de diretórios:
    project-root/
    ├── controllers/
    ├── models/
    ├── views/
    │   ├── pages/
    │   └── partials/
    ├── public/
    │   ├── css/
    │   └── js/
    ├── routes/
    ├── db/
    │   └── schema.sql
    ├── app.js
    └── docs/
    3.	Todas as rotas devem ser divididas em arquivos modulares por domínio (ex: userRoutes.js, careerRoutes.js) e importadas em app.js.
	4.	Controladores não devem renderizar HTML diretamente. Devem passar dados estruturados à view (via Mustache) e manter separação entre lógica de controle e apresentação.
	5.	Toda função de acesso ao banco de dados deve ficar nos arquivos de models/. Nenhuma query SQL deve estar em controladores ou rotas.
	6.	Views devem usar apenas dados enviados explicitamente pelo controller. Nada de lógica ou chamadas externas dentro dos arquivos .mustache.
	7.	Arquivos com mais de 400 linhas devem ser divididos por funcionalidade. Evite agrupamentos genéricos como “utils.js” sem escopo bem definido.
	8.	Toda alteração estrutural (criação, remoção ou movimentação de arquivos/pastas centrais) deve ser validada com o time e refletida na documentação técnica.

Exemplo:
A rota /profile renderiza uma página do usuário.
	•	Dados são buscados via models/userModel.js.
	•	A função getUserProfile() é chamada no controllers/userController.js.
	•	A view views/pages/profile.mustache exibe os dados.
	•	O caminho da rota está em routes/userRoutes.js.

Responsabilidade:
Todos os desenvolvedores devem seguir esta arquitetura base. Casos de exceção devem ser justificados e aprovados.

Auditoria:
Durante code reviews, estruturas fora do padrão devem ser identificadas e alinhadas com esta regra.