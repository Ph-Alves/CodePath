---
description: 
globs: 
alwaysApply: true
---
Project Rule 4: Código e Tecnologias

Objetivo:
Garantir padronização, clareza e eficiência na escrita de código e no uso das tecnologias escolhidas: HTML5, CSS3, JavaScript, Express.js, mustache-express e SQLite.

Escopo:
Aplica-se à implementação de funcionalidades, manipulação de dados, criação de rotas, renderização de views e uso do banco de dados.

Diretrizes:
	1.	HTML e Mustache
	•	Os arquivos .mustache devem ser usados exclusivamente para apresentação.
	•	Não utilizar lógica JS diretamente em arquivos de template.
	•	Separar views por página em views/pages/, e componentes reutilizáveis em views/partials/.
	•	Evitar repetição de código visual através de partials com dados dinâmicos.
	2.	JavaScript (frontend e backend)
	•	Sempre modularizar funções.
	•	Usar const e let; evitar var.
	•	Código limpo, sem console.log em produção.
	•	Evitar manipulação direta de DOM sem necessidade.
	•	Separar scripts JS por contexto: não misturar funções genéricas com específicas da página.
	3.	Express.js
	•	Toda rota deve estar em arquivos modulares dentro da pasta routes/.
	•	As funções associadas às rotas devem ser mantidas nos controladores (controllers/), e não diretamente nos arquivos de rota.
	•	Middlewares devem ser usados para validações, autenticação e tratamento de erros globais.
	•	Rotas devem ser nomeadas de forma clara, com métodos REST (GET, POST, PUT, DELETE).
	4.	Banco de Dados (SQLite)
	•	Todas as queries devem ser encapsuladas em funções dentro da pasta models/.
	•	Nunca executar queries diretamente dentro de controladores ou rotas.
	•	O arquivo schema.sql deve ser atualizado sempre que a estrutura for alterada.
	•	Consultas devem ser protegidas contra injeção de SQL usando parâmetros preparados.
	5.	Organização e Qualidade do Código
	•	Usar nomes descritivos para variáveis e funções (getUserProgress, renderQuizPage).
	•	Arquivos com mais de 400 linhas devem ser refatorados.
	•	Evitar duplicação de lógica (seguir o princípio DRY).
	•	Inserir comentários apenas quando necessário para explicar decisões ou lógicas menos óbvias.

Exemplo:
A rota POST /quiz/:id/submit deve estar em routes/quizRoutes.js, chamar quizController.submitQuiz, que utiliza quizModel.saveUserAnswers. Os dados renderizados em result.mustache devem vir via objeto limpo e validado.

Responsabilidade:
Cada desenvolvedor deve seguir essa regra ao implementar qualquer funcionalidade ou ajustar código existente.

Auditoria:
Durante os code reviews, erros comuns como SQL no controller, lógica nas views ou nomes genéricos devem ser corrigidos com base nesta regra.