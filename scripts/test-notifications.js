/**
 * Script de Teste - Sistema de Notifica√ß√µes Autom√°ticas
 * Testa todas as funcionalidades do sistema de notifica√ß√µes
 */

const path = require('path');
const { initializeDatabase } = require('../models/database');
const notificationController = require('../controllers/notificationController');

/**
 * Inicializar banco de dados para testes
 */
async function initializeTestDatabase() {
    try {
        console.log('üîÑ Inicializando banco de dados para testes...');
        await initializeDatabase();
        console.log('‚úÖ Banco de dados inicializado com sucesso');
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao inicializar banco de dados:', error);
        return false;
    }
}

/**
 * Limpar notifica√ß√µes de teste
 */
async function cleanupTestNotifications() {
    try {
        const { database } = require('../models/database');
        await database.run(`DELETE FROM notifications WHERE message LIKE '%[TESTE]%'`);
        console.log('‚úÖ Notifica√ß√µes de teste limpas');
    } catch (error) {
        console.error('‚ùå Erro ao limpar notifica√ß√µes de teste:', error);
    }
}

/**
 * Testar cria√ß√£o de notifica√ß√µes autom√°ticas
 */
async function testAutoNotifications() {
    console.log('\nüß™ Testando Sistema de Notifica√ß√µes Autom√°ticas...\n');
    
    const testUserId = 1; // Carlos (usu√°rio de teste)
    
    try {
        // Teste 1: Notifica√ß√£o de boas-vindas
        console.log('1. Testando notifica√ß√£o de boas-vindas...');
        await notificationController.processAutoNotification('user_registered', testUserId, {
            userName: 'Carlos [TESTE]'
        });
        console.log('‚úÖ Notifica√ß√£o de boas-vindas criada');
        
        // Teste 2: Notifica√ß√£o de level up
        console.log('2. Testando notifica√ß√£o de level up...');
        await notificationController.processAutoNotification('level_up', testUserId, {
            newLevel: 5,
            xpGained: 150
        });
        console.log('‚úÖ Notifica√ß√£o de level up criada');
        
        // Teste 3: Notifica√ß√£o de conquista
        console.log('3. Testando notifica√ß√£o de conquista...');
        await notificationController.processAutoNotification('achievement_unlocked', testUserId, {
            achievementName: 'Primeiro Passo [TESTE]',
            achievementDescription: 'Completou sua primeira aula'
        });
        console.log('‚úÖ Notifica√ß√£o de conquista criada');
        
        // Teste 4: Notifica√ß√£o de streak
        console.log('4. Testando notifica√ß√£o de streak...');
        await notificationController.processAutoNotification('daily_streak', testUserId, {
            streakDays: 7
        });
        console.log('‚úÖ Notifica√ß√£o de streak criada');
        
        // Teste 5: Notifica√ß√£o de aula conclu√≠da
        console.log('5. Testando notifica√ß√£o de aula conclu√≠da...');
        await notificationController.processAutoNotification('lesson_completed', testUserId, {
            lessonName: 'Introdu√ß√£o ao JavaScript [TESTE]',
            xpGained: 50
        });
        console.log('‚úÖ Notifica√ß√£o de aula conclu√≠da criada');
        
        // Teste 6: Notifica√ß√£o de quiz completado
        console.log('6. Testando notifica√ß√£o de quiz completado...');
        await notificationController.processAutoNotification('quiz_completed', testUserId, {
            quizName: 'Quiz JavaScript B√°sico [TESTE]',
            score: 85,
            xpGained: 100
        });
        console.log('‚úÖ Notifica√ß√£o de quiz completado criada');
        
        // Teste 7: Notifica√ß√£o de quiz perfeito
        console.log('7. Testando notifica√ß√£o de quiz perfeito...');
        await notificationController.processAutoNotification('quiz_completed', testUserId, {
            quizName: 'Quiz Avan√ßado [TESTE]',
            score: 100,
            xpGained: 150,
            bonusXP: 50
        });
        console.log('‚úÖ Notifica√ß√£o de quiz perfeito criada');
        
        // Teste 8: Notifica√ß√£o de pacote conclu√≠do
        console.log('8. Testando notifica√ß√£o de pacote conclu√≠do...');
        await notificationController.processAutoNotification('package_completed', testUserId, {
            packageName: 'Fundamentos Web [TESTE]',
            xpGained: 500
        });
        console.log('‚úÖ Notifica√ß√£o de pacote conclu√≠do criada');
        
        // Teste 9: Notifica√ß√£o de login di√°rio
        console.log('9. Testando notifica√ß√£o de login di√°rio...');
        await notificationController.processAutoNotification('daily_login', testUserId, {
            xpGained: 10,
            streakDays: 3
        });
        console.log('‚úÖ Notifica√ß√£o de login di√°rio criada');
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error);
    }
}

/**
 * Verificar notifica√ß√µes criadas
 */
async function checkCreatedNotifications() {
    try {
        console.log('\nüìä Verificando notifica√ß√µes criadas...\n');
        
        const { database } = require('../models/database');
        const notifications = await database.all(`
            SELECT type, title, message, created_at 
            FROM notifications 
            WHERE message LIKE '%[TESTE]%' 
            ORDER BY created_at DESC
        `);
        
        console.log(`üìã Total de notifica√ß√µes de teste: ${notifications.length}\n`);
        
        notifications.forEach((notification, index) => {
            console.log(`${index + 1}. [${notification.type}] ${notification.title}`);
            console.log(`   üìù ${notification.message}`);
            console.log(`   üïí ${notification.created_at}\n`);
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar notifica√ß√µes:', error);
    }
}

/**
 * Testar contagem de notifica√ß√µes n√£o lidas
 */
async function testUnreadCount() {
    try {
        console.log('üìä Testando contagem de n√£o lidas...');
        
        const notificationModel = require('../models/notificationModel');
        const count = await notificationModel.getUnreadCount(1);
        
        console.log(`‚úÖ Notifica√ß√µes n√£o lidas para usu√°rio 1: ${count}`);
        
    } catch (error) {
        console.error('‚ùå Erro ao testar contagem:', error);
    }
}

/**
 * Executar todos os testes
 */
async function runAllTests() {
    console.log('üöÄ Iniciando Testes do Sistema de Notifica√ß√µes\n');
    console.log('=' .repeat(50));
    
    // Inicializar banco de dados
    const dbInitialized = await initializeTestDatabase();
    if (!dbInitialized) {
        console.error('‚ùå Falha na inicializa√ß√£o do banco. Encerrando testes.');
        process.exit(1);
    }
    
    // Limpar notifica√ß√µes antigas de teste
    await cleanupTestNotifications();
    
    // Executar testes
    await testAutoNotifications();
    await checkCreatedNotifications();
    await testUnreadCount();
    
    console.log('=' .repeat(50));
    console.log('‚úÖ Testes conclu√≠dos!\n');
    console.log('üí° Dicas:');
    console.log('   - Acesse http://localhost:4000/dashboard para ver as notifica√ß√µes');
    console.log('   - As notifica√ß√µes de teste cont√™m [TESTE] no texto');
    console.log('   - Use o script novamente para limpar e recriar os testes\n');
    
    process.exit(0);
}

// Executar se chamado diretamente
if (require.main === module) {
    runAllTests().catch(error => {
        console.error('‚ùå Erro fatal nos testes:', error);
        process.exit(1);
    });
}

module.exports = {
    testAutoNotifications,
    cleanupTestNotifications,
    checkCreatedNotifications,
    testUnreadCount
}; 